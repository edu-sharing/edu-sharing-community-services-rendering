<?php
global $Locale, $Translate, $MC_URL;
require_once (__DIR__ . '/../../../../conf/audio-video.conf.php');

$errMsg = new Phools_Message_Default('Video player cannot play back this video.');
$conversionMsg = new Phools_Message_Default('inConversionQueue');
$settingsLabel = new Phools_Message_Default('Set video resolution');
$licid = uniqid();
$styleVideo = 'max-width: 100%;';
if(isset($_REQUEST['width']) && !empty($_REQUEST['width'])){
    $styleVideo .= 'width:'.(int)$_REQUEST['width'] . 'px';
}

$defaultRes = VIDEO_DEFAULT_RESOLUTION;
$videoResolutions = VIDEO_RESOLUTIONS;
if ( empty($url[$defaultRes]) ){
    $defaultRes = $videoResolutions[0];
}
?>

<style>
    <?php
        if ($css){
            include(dirname(__FILE__) . '/../../css/metadata.css');
            include(dirname(__FILE__) . '/../../css/inline.php');
        }
    ?>
</style>
<div class="edusharing_rendering_content_video_wrapper">
    <video src="<?php echo $url[$defaultRes]?>" style="<?php echo $styleVideo?>" data-tap-disabled="true" id="<?php echo $videoObjectIdentifier?>" data-licid="<?php echo $licid;?>" controls controlsList="nodownload" oncontextmenu="return false;"></video>
    <div id="edusharing_rendering_content_video_options_container_<?php echo $videoObjectIdentifier ?>" class="edusharing_rendering_content_video_options_container">
        <button id="edusharing_rendering_content_video_options_button<?php echo $videoObjectIdentifier ?>" class="edusharing_rendering_content_video_options" aria-label="<?php echo $settingsLabel->localize($Locale, $Translate) ?>" aria-haspopup="true">
            <i class="material-icons edusharing_rendering_content_video_options_toggle">settings</i>
        </button>
        <div class="edusharing_rendering_content_video_options_content">
            <ul role="menu" id="edusharing_rendering_content_video_options_resolutions_<?php echo $videoObjectIdentifier ?>" class="edusharing_rendering_content_video_options_resolutions" aria-labelledby="edusharing_rendering_content_video_options_button<?php echo $videoObjectIdentifier ?>">
                <?php
                foreach($url as $res => $u) {
                    if (!empty($u)) {
                        echo '<li role="menuitemradio" aria-checked="' . ($res == $defaultRes ? 'true' : 'false') . '" tabindex="0" class="option_' . $videoObjectIdentifier . '" id="option_' . $videoObjectIdentifier . '-' . $res . '" data-url="' . $u . '">' . ($res == $defaultRes ? '<i class="material-icons" aria-hidden="true">done</i>' : '') . $res . 'p</li>';
                    } else {
                        echo '<li role="menuitemradio" disabled="true" aria-disabled="true" aria-checked="false" class="edusharing_rendering_content_video_options_resolutions_converting" title="' . $conversionMsg->localize($Locale, $Translate) . '">' . $res . 'p</li>';
                    }
                }
                ?>
            </ul>
        </div>
    </div>
    <?php if (isset($footer)){
        echo $footer;
    } ?>
    <p id="e_<?php echo $videoObjectIdentifier ?>" style="display: none;"><?php echo $errMsg->localize($Locale, $Translate); ?></p>
</div>

<script>
    (() => {
        const menuContainerSelector = '#edusharing_rendering_content_video_options_container_<?php echo $videoObjectIdentifier ?>';
        const menuButtonSelector = '#edusharing_rendering_content_video_options_button<?php echo $videoObjectIdentifier ?>';

        $('.option_<?php echo $videoObjectIdentifier ?>').click(function() {
            onOptionClick(this);
        });
        $('#edusharing_rendering_content_video_options_button<?php echo $videoObjectIdentifier ?>').on("click", function() {
            $(this).parent().find('.edusharing_rendering_content_video_options_content').toggle();
        });

        $('.option_<?php echo $videoObjectIdentifier ?>').keydown((event) => {
            switch (event.code) {
                case 'Enter':
                    onOptionClick(event.target);
                    event.preventDefault();
                    break;
                case 'ArrowUp':
                    $(event.target).prev().focus();
                    event.preventDefault();
                    break;
                case 'ArrowDown':
                    $(event.target).next().focus();
                    event.preventDefault();
                    break;
                case 'Escape':
                    closeMenu();
                    $(menuButtonSelector).focus();
                    event.preventDefault();
                    break;
                case 'Tab':
                    closeMenu();
                    $(menuButtonSelector).focus();
                    /* Don't call `preventDefault`, so the tab action is executed as if the menu
                     button had the focus at the time of the key press and the menu was collapsed. */
                    break;
            }
        });

        let removeOutsideClickHandler;

        function onOptionClick(element) {
            var url = $(element).attr('data-url');
            if (url == undefined)
                return;
            const selectedOption = $(element).parent().find('[aria-checked="true"]');
            selectedOption.find('i.material-icons').remove();
            selectedOption.attr('aria-checked', 'false');
            $(element).prepend('<i class="material-icons" aria-hidden="true">done</i>');
            $(element).attr('aria-checked', 'true');
            const video = document.getElementById('<?php echo $videoObjectIdentifier ?>');
            video.pause();
            video.setAttribute('src', url + '#t=' + Math.ceil(video.currentTime)); /* ie not working */
            video.load();
            video.play();
            closeMenu();
            setTimeout(() => { /* Don't trigger another button click */
                $(menuButtonSelector).focus();
            });
        }

        function openMenu() {
            const button = $(menuButtonSelector);
            const container = $(menuContainerSelector);
            button.attr('aria-expanded', 'true');
            button.attr('aria-controls', 'edusharing_rendering_content_video_options_resolutions_<?php echo $videoObjectIdentifier ?>');
            container.addClass('edusharing_rendering_content_video_options_container_expanded');
            setTimeout(() => {
                $('.option_<?php echo $videoObjectIdentifier ?>[aria-checked="true"')[0].focus();
                registerCloseMenuOnOutsideClick();
            });
        }

        function closeMenu() {
            const button = $(menuButtonSelector);
            const container = $(menuContainerSelector);
            button.removeAttr('aria-expanded');
            button.removeAttr('aria-controls');
            container.removeClass('edusharing_rendering_content_video_options_container_expanded');
            if (removeOutsideClickHandler) {
                removeOutsideClickHandler();
            }
        }

        function registerCloseMenuOnOutsideClick() {
            function handleClick(event) {
                if (!isInsideOptionsMenu(event.target)) {
                    closeMenu();
                }
            }
            document.body.addEventListener('click', handleClick);
            removeOutsideClickHandler = () => document.body.removeEventListener('click', handleClick);
        }

        function isInsideOptionsMenu(element) {
            return $(element).closest(menuContainerSelector).length > 0;
        }

        function setResByConnection() {
            /* navigator.connection not yet supported by all browsers, so check it first */
            if (!navigator.connection) {
                return;
            }

            const downLink = navigator.connection.downlink;

            let resolution = '<?php echo $videoResolutions[0]; ?>';
            if (downLink >= 5) {
                resolution = '<?php echo end($videoResolutions); ?>';
            } else if (downLink >= 2) {
                /* VIDEO_DEFAULT_RESOLUTION is already set, so we can skip the rest */
                return;
            }

            const option = '#<?php echo 'option_' . $videoObjectIdentifier . '-'; ?>' + resolution;
            const url = $(option).attr('data-url');
            if (url != undefined) {
                const selectedOption = $(option).parent().find('[aria-checked="true"]');
                selectedOption.find('i.material-icons').remove();
                selectedOption.attr('aria-checked', 'false');
                $(option).prepend('<i class="material-icons" aria-hidden="true">done</i>');
                $(option).attr('aria-checked', 'true');
                var video_<?php echo $videoObjectIdentifier ?> = document.getElementById('<?php echo $videoObjectIdentifier ?>');
                video_<?php echo $videoObjectIdentifier ?>.pause();
                video_<?php echo $videoObjectIdentifier ?>.setAttribute('src', url + '#t=' + Math.ceil(video_<?php echo $videoObjectIdentifier ?>.currentTime)); /* ie not working */
                video_<?php echo $videoObjectIdentifier ?>.load();
            }
        }

        $(document).ready(function() {
            setResByConnection();
        });

        document.getElementById('<?php echo $videoObjectIdentifier ?>').addEventListener('error', function(e) {
            document.getElementById('b_<?php echo $videoObjectIdentifier ?>').style.display = 'none';
            switch (e.target.error.code) {
                case e.target.error.MEDIA_ERR_ABORTED:
                case e.target.error.MEDIA_ERR_NETWORK:
                case e.target.error.MEDIA_ERR_DECODE:
                case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
                    document.getElementById('<?php echo $videoObjectIdentifier ?>').style.display = 'none';
                    document.getElementById('e_<?php echo $videoObjectIdentifier ?>').style.display = 'block';
                    break;
                default:
                    return;
            }
        }, true);

        function trackError() {
            var url = '<?php echo htmlentities($logger, ENT_QUOTES, 'UTF-8') ?>';
            var data = '<?php echo htmlentities($cachePath, ENT_QUOTES, 'UTF-8') ?>';
            try {
                x = new(this.XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');
                x.open(data ? 'POST' : 'GET', url, 1);
                x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                x.send(data)
            } catch (e) {
                window.console && console.log(e);
            }
        };
    })();
</script>